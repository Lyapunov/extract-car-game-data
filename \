<?php
class Sockets
{
   public function __construct( $logger, $address, $port, $max_client, $non_block = true ) {
      $this->logger     = $logger;
      $this->address    = $address;
      $this->port       = $port;
      $this->max_client = $max_client;

      $this->alive      = 0;

      if(!($this->sock = socket_create(AF_INET, SOCK_STREAM, 0)))
      {
          $errorcode = socket_last_error();
          $errormsg = socket_strerror($errorcode);

          $this->logger->error( "Couldn't create socket: [$errorcode] $errormsg" );
          return;
      }
       
      $this->logger->log("Socket created", 2);

      if ( $non_block ) {
         if( !socket_set_nonblock($this->sock) )
         {
             $errorcode = socket_last_error();
             $errormsg = socket_strerror($errorcode);
              
             $this->logger->error("Could not set to nonblock : [$errorcode] $errormsg");
             return;
         }

         $this->logger->log("Set not-blocking flag", 2);
      }
       
      // Bind the source address
      if( !socket_bind($this->sock, $address , $port) )
      {
          $errorcode = socket_last_error();
          $errormsg = socket_strerror($errorcode);
           
          $this->logger->error("Could not bind socket : [$errorcode] $errormsg");
          return;
      }
       
      $this->logger->log("Socket bind OK", 2);
       
      if(!socket_listen ($this->sock , 10))
      {
          $errorcode = socket_last_error();
          $errormsg = socket_strerror($errorcode);
           
          $this->logger->error("Could not listen on socket : [$errorcode] $errormsg");
          return;
      }
       
      $this->logger->log("Socket listen OK", 2);
       
      
      //array of client sockets
      $this->client_socks = array();
       
      //array of sockets to read
      $this->client_read = array();
       
      $this->logger->log("Waiting for incoming connections...", 2);
      $this->alive = 1;
   }

   public function readAndWriteSockets() {
      if ( !$this->alive ) {
         return;
      }

      //prepare array of readable client sockets
      $this->client_read = array();
       
      //first socket is the master socket
      $this->client_read[0] = $sock;
       
      //now add the existing client sockets
      for ($i = 0; $i < $max_clients; $i++)
      {
          if($client_socks[$i] != null)
          {
              $read[$i+1] = $client_socks[$i];
          }
      }
       
      //now call select - blocking call
      if(socket_select($read , $write , $except , null) === false)
      {
          $errorcode = socket_last_error();
          $errormsg = socket_strerror($errorcode);
       
          die("Could not listen on socket : [$errorcode] $errormsg \n");
      }
       
      //if ready contains the master socket, then a new connection has come in
      if (in_array($sock, $read)) 
      {
          for ($i = 0; $i < $max_clients; $i++)
          {
              if ($client_socks[$i] == null) 
              {
                  $client_socks[$i] = socket_accept($sock);
                   
                  //display information about the client who is connected
                  if(socket_getpeername($client_socks[$i], $address, $port))
                  {
                      echo "Client $address : $port is now connected to us, socket: [$client_socks[$i]]. \n";
                  }
                   
                  //Send Welcome message to client
                  $message = "Welcome to php socket server version 1.0 \n";
                  $message .= "Enter a message and press enter, and i shall reply back \n";
                  socket_write($client_socks[$i] , $message);
                  break;
              }
          }
      }
    
      //check each client if they send any data
      for ($i = 0; $i < $max_clients; $i++)
      {
          if (in_array($client_socks[$i] , $read))
          {
              $input = socket_read($client_socks[$i] , 1024);
               
              if ($input == null) 
              {
                  //zero length string meaning disconnected, remove and close the socket
                  echo "Closing socket [$client_socks[$i]].\n";
                  socket_close($client_socks[$i]);
                  unset($client_socks[$i]);
              } else {
                  $n = trim($input);
                  
                  $output = "OK ... $input";
                   
                  echo "Sending output to client \n";
                   
                  //send response to client
                  socket_write($client_socks[$i] , $output);
              }
          }
      }

   }
}


